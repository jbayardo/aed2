TAD rur ES nat
TAD caracteristica ES string

TAD Robot
    generos robot
    exporta id, caracteristicas, instanciar
    igualdad observacional
        (∀r₁, r₂ : robot) (r₁ =obs r₂ ↔
            id(r₁) =obs id(r₂) ∧ caracteristicas(r₁) =obs caracteristicas(r₂))
    observadores basicos
        id: robot → rur
        caracteristicas: robot → conj(caracteristica)
    generadores
        instanciar: rur × conj(caracteristica) → robot
    axiomas
        id(instanciar(r, e, c)) ≡ r
        caracteristicas(instanciar(r, e, c)) ≡ c
Fin TAD

TAD Restriccion
    generos restriccion
    exporta AND, OR, NOT, VAR, cumple
    igualdad observacional
        ??? Preguntar si hace falta.
    observadores basicos
        cumple: robot × restriccion → bool
    generadores
        AND: restriccion × restriccion → restriccion
        OR: restriccion × restriccion → restriccion
        NOT: restriccion → restriccion
        VAR: caracteristica → restriccion
    axiomas
        cumple(r, VAR(c)) ≡ c ∈ caracteristicas(r)
        cumple(r, NOT(c)) ≡ ¬(cumple(r, c))
        cumple(r, AND(c1, c2)) ≡ cumple(r, c1) ∧ cumple(r, c2)
        cumple(r, OR(c1, c2)) ≡ cumple(r, c1) ∨ₗ cumple(r, c2)
Fin TAD

TAD estacion ES string

TAD Mapa
    generos mapa
    exporta nuevo, crearEst, conectar, esBloqueante
    igualdad observacional
        (∀ m₁, m₂ : mapa) (m₁ =obs m₂ ↔
            estaciones(m₁) =obs estaciones(m₂) ∧ₗ
            (∀ e ∈ estaciones(m₁)) (conexiones(m₁, e) =obs conexiones(m₂, e)))
    observadores basicos
        estaciones: mapa → conj(estacion)
        conexiones: mapa m × estacion e → conj(⟨estacion, restriccion⟩) {e ∈ estaciones(m)}
    generadores
        nuevo: → mapa
        crearEst: mapa m × estacion a → mapa {a ∉ estaciones(m)}
        conectar: mapa m × estacion a × estacion b × restriccion → mapa
    otras operaciones
        esBloqueante: mapa m × robot × estacion e → bool {e ∈ estaciones(m)}
        esBloqueante(m, r, e) ≡
            if ϕ?(conexiones(m, e)) then
                False
            else
                esBloqueante'(conexiones(m, e), r)
            fi

ESTAMOS ASUMIENDO QUE NO HAY ESTACIONES NO CONEXAS
        esBloqueante': conj(⟨estacion, restriccion⟩) × robot → bool
        esBloqueante'(c, r) ≡
            if ϕ?(c) then
                True
            else
                if cumple(r, π₂(dameUno(c))) then
                    False
                else
                    esBloqueante'(sinUno(c), r)
                fi
            fi
    axiomas
        conexiones(crearEst(m, e)) ≡ ϕ
        conexiones(conectar(m, a, b, r), e) ≡
            if e ≡ a then
                ⟨b, r⟩ ∪ conexiones(m, e)
            else
                if e ≡ b then
                    ⟨a, r⟩ ∪ conexiones(m, e)
                else
                    conexiones(m, e)
                fi
            fi

        estaciones(nuevo) ≡ ϕ
        estaciones(crearEst(m, e)) ≡ { e } ∪ estaciones(m)
        estaciones(conectar(m, a, b)) ≡ estaciones(m)
Fin TAD

TAD Ciudad
    generos ciudad
    igualdad observacional
    observadores basicos
        mapeo: ciudad → mapa
        robots: ciudad → conj(robot)
        estacionActual: ciudad c × robot r → estacion {r ∈ robots(c)}
    generadores
        nueva: mapa → ciudad
TODO: ACA NO DICE NADA SOBRE QUE LA ESTACION TIENE QUE PERTENECER AL MAPA

        agregar: ciudad c × robot r × estacion e → ciudad {r ∉ robots(c) ∧ ¬esBloqueante(mapeo(c), r, e)}

TAMPOCO EN ESTE CASO

        mover: ciudad c × robot r × estacion e → ciudad {estaConectada(c, r, e)}
    otras operaciones
        infracciones: ciudad c × robot r → nat {r ∈ robots(c)}
        estaConectada: ciudad c × robot r × estacion e → bool {r ∈ robots(c)}
        inspeccion: ciudad c × estacion e -> ciudad --- PREGUNTAR 
    axiomas
        mapeo(nueva(m)) ≡ m
        mapeo(agregar(c, r, e)) ≡ mapeo(c)
        mapeo(mover(c, r, e)) ≡ mapeo(c)

        robots(nueva(m)) ≡ ϕ
        robots(mover(c, r, e)) ≡ robots(c)
        robots(agregar(c, r, e)) ≡ r ∪ robots(c)

        estacionActual(agregar(c, r', e), r) ≡
            if r ≡ r' then
                e
            else
                estacionActual(c, r)
            fi
        estacionActual(mover(c, r', e), r) ≡
            if r ≡ r' then
                e
            else
                estacionActual(c, r)
            fi

        infracciones(agregar(c,r', e), r) ≡ 0
        infracciones(mover(c, r', e), r) ≡ 
            if r ≡ r' then
                if ¬cumple(dameRestriccion(conexiones(mapeo(c), estacionActual(c, r')), e)) then
                    1 + infracciones(c, r)
                else
                    infracciones(c, r)
                fi
            else
                infracciones(c,r)
            fi

        dameRestriccion: conj(⟨estacion, restriccion⟩) c x estacion e -> restriccion {¬ ϕ?(c) ∧ e ∈ c ???}
        dameRestriccion(c, e) ≡ if π₁(dameUno(c)) ≡ e then 
                                    π₂(dameUno(c))
                                else 
                                    dameRestriccion(sinUno(c), e) 
                                fi 

Fin TAD
