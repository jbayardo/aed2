TAD Zoologico

generos zoo

igualdad observacional:

	(∀ z,x : zoo) z =obs x <=> animales(z) = animales(x)

Generadores:

	nuevo: → zoo
	ingreso: string e x nat c x zoo z → zoo 		{contarAnimales(claves(actualizar(e, c, animales(z))), 
														actualizar(e, c, animales(z))) > poblacion(z)/2}

Observadores:
	animales: zoo → dicc(string, nat)

Otras Operaciones:
	actualizar: string e x nat c x dicc(string, nat) d → dicc(string, nat)
	poblacion: zoo → nat
	contarAnimales: conj(string) c x dicc(string, nat) d → nat						{c ⊂ claves(d)}
	comidosPor: string e x conj(string) c x dicc(string, nat) d → conj(string)		{c ⊂ claves(d)} 
	eliminables: conj(string) c x dicc(string, nat) d → conj(string)				{c ⊂ claves(d)} 
	sobrevivientes: conj(string) c x dicc(string, nat) d → dicc(string, nat)  		{c ⊂ claves(d)} 

poblacion(z) ≡ contarAnimales(claves(animales(z)), z)

contarAnimales(c, d) ≡ if ϕ?(c) then 0 
						else
							obtener(dameUno(c), d) +
							contarAnimales(sinUno(c), d)
						fi

comidosPor(e, c, d) ≡ if ϕ?(c) then ϕ
						else
							if agresividad(e) > agresividad(dameUno(c))
								∧ obtener(e, d) > obtener(dameUno(c), d)
							then
								{dameUno(c)}
							else
								ϕ
							fi
								U comidosPor(e, sinUno(c), d)
						fi

eliminables(c, d) ≡ if ϕ?(c) then ϕ
					else
						comidosPor(dameUno(c), claves(d), d)
						U eliminables(sinUno(c), d)
					fi

sobrevivientes(c, d) ≡ if ϕ?(c) then vacio
				else
					definir(dameUno(c), obtener(dameUno(c), d), sobrevivientes(sinUno(c), d))
				fi

actualizar(e, c, d) ≡ definir(e, c + if definido?(e, d) then obtener(e, d) else 0 fi, d)

animales(nuevo) ≡ vacio
animales(ingreso(e, c, z)) ≡ sobrevivientes(
								claves( actualizar(e, c, animales(z)) ) - 
								eliminables(claves(actualizar(e, c, animales(z))), actualizar(e, c, animales(z))),
								actualizar(e, c, animales(z))
								)
















